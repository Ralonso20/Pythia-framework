receivers:
  # OpenTelemetry receiver for traces and metrics
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Prometheus receiver for scraping metrics
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']

processors:
  # Batch processor to reduce number of outgoing requests
  batch:
    send_batch_size: 1024
    timeout: 1s
    send_batch_max_size: 2048

  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 256
    spike_limit_mib: 64

  # Resource processor to add/modify resource attributes
  resource:
    attributes:
      - key: deployment.environment
        value: docker-compose
        action: upsert
      - key: service.namespace
        value: pythia
        action: upsert

  # Attributes processor for span/metric attributes
  attributes:
    actions:
      # Add collector version
      - key: otel.collector.version
        value: 0.89.0
        action: upsert
      # Remove sensitive attributes
      - key: http.request.header.authorization
        action: delete

exporters:
  # Send traces to Tempo
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
    sending_queue:
      enabled: true
      num_consumers: 10
      queue_size: 1000
    retry_on_failure:
      enabled: true
      initial_interval: 1s
      max_interval: 30s
      max_elapsed_time: 300s

  # Export metrics to Prometheus
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: otel
    const_labels:
      collector: pythia-otel-collector

  # Send metrics to Prometheus remote write (alternative)
  prometheusremotewrite:
    endpoint: http://prometheus:9090/api/v1/write
    tls:
      insecure: true
    retry_on_failure:
      enabled: true
    sending_queue:
      enabled: true

  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

  # Send logs to Loki (optional)
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    tenant_id: pythia
    labels:
      attributes:
        service.name: "service_name"
        service.version: "service_version"
      resource:
        deployment.environment: "environment"

extensions:
  # Health check extension
  health_check:
    endpoint: 0.0.0.0:13133

  # Performance profiler
  pprof:
    endpoint: 0.0.0.0:1777

  # zPages extension for diagnostics
  zpages:
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]

  pipelines:
    # Traces pipeline
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource, attributes]
      exporters: [otlp/tempo, logging]

    # Metrics pipeline
    metrics:
      receivers: [otlp, prometheus]
      processors: [memory_limiter, batch, resource]
      exporters: [prometheus, prometheusremotewrite]

    # Logs pipeline (optional)
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch, resource]
      exporters: [loki, logging]

  # Telemetry configuration for the collector itself
  telemetry:
    logs:
      level: info
    metrics:
      level: detailed
      address: 0.0.0.0:8888
